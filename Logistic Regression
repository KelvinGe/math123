# Loading Data
import numpy as np
import struct
from array import array
from os.path  import join

#
# MNIST Data Loader Class
#
class MnistDataloader(object):
    def __init__(self, training_images_filepath,training_labels_filepath,
                 test_images_filepath, test_labels_filepath):
        self.training_images_filepath = training_images_filepath
        self.training_labels_filepath = training_labels_filepath
        self.test_images_filepath = test_images_filepath
        self.test_labels_filepath = test_labels_filepath

    def read_images_labels(self, images_filepath, labels_filepath):
        labels = []
        with open(labels_filepath, 'rb') as file:
            magic, size = struct.unpack(">II", file.read(8))
            if magic != 2049:
                raise ValueError('Magic number mismatch, expected 2049, got {}'.format(magic))
            labels = array("B", file.read())

        with open(images_filepath, 'rb') as file:
            magic, size, rows, cols = struct.unpack(">IIII", file.read(16))
            if magic != 2051:
                raise ValueError('Magic number mismatch, expected 2051, got {}'.format(magic))
            image_data = array("B", file.read())
        images = []
        for i in range(size):
            images.append([0] * rows * cols)
        for i in range(size):
            img = np.array(image_data[i * rows * cols:(i + 1) * rows * cols])
            img = img.reshape(28, 28)
            images[i][:] = img

        return images, labels

    def load_data(self):
        x_train, y_train = self.read_images_labels(self.training_images_filepath, self.training_labels_filepath)
        x_test, y_test = self.read_images_labels(self.test_images_filepath, self.test_labels_filepath)
        return (x_train, y_train),(x_test, y_test)

training_images_filepath = 'archive/train-images.idx3-ubyte'
training_labels_filepath = 'archive/train-labels.idx1-ubyte'
test_images_filepath = 'archive/t10k-images.idx3-ubyte'
test_labels_filepath = 'archive/t10k-labels.idx1-ubyte'

mnist_dataloader = MnistDataloader(training_images_filepath,
                                   training_labels_filepath,
                                   test_images_filepath,
                                   test_labels_filepath)

(train_image, train_label), (test_image, test_label) = mnist_dataloader.load_data()
image_train = np.array(train_image[:1000])
label_train = np.array(train_label[:1000])

image_test = np.array(test_image[:300])
label_test = np.array(test_label[:300])

(l,m,n) = image_train.shape
(k,i,j) = image_test.shape
image_train_2d = image_train.reshape(l,m*n)
image_test_2d = image_test.reshape(k,i*j)

# Creating Logistic Regression model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(fit_intercept=True,
                           multi_class='auto',
                           penalty='l2', #ridge regression
                           solver='saga',
                           max_iter=10000,
                           C=50)
model
model.fit(image_train_2d, label_train)
from sklearn.metrics import accuracy_score, classification_report

label_predict = model.predict(image_test_2d)

accuracy = accuracy_score(label_test, label_predict)
print(f"Logistic Regression Accuracy: {accuracy}")
print(classification_report(label_test, label_predict))

# Confusion Matrix Accuracy
from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(label_test, label_predict)
print("Confusion Matrix:")
print(conf_matrix)
accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
print("Accuracy using Confusion Matrix:", accuracy)
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics

plt.figure(figsize=(9,9))
sns.heatmap(conf_matrix, annot=True, fmt=".0f", linewidths=.5, square = True, cmap = 'Blues')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy)
plt.title(all_sample_title, size = 15)

# Gaussian Noise
def add_gaussian_noise(images, mean, std):
    """
    Adds Gaussian noise to a set of images.

    Parameters:
    - images: NumPy array of images, assumed to be in the shape [num_images, height, width].
    - mean: Mean of the Gaussian noise.
    - std: Standard deviation of the Gaussian noise.

    Returns:
    - noisy_images: NumPy array of images with Gaussian noise added.
    """
    # Generate Gaussian noise
    gaussian_noise = np.random.normal(mean, std, images.shape)
    # Add the Gaussian noise to the images
    noisy_images = images + gaussian_noise
    # Clip the images to be within the valid range
    noisy_images = np.clip(noisy_images, 0, 255)
    return noisy_images.astype(images.dtype)

gaus_noise_image = np.array([add_gaussian_noise(image, mean=0, std=25) for image in image_test])
gaus_noise_image_2d = gaus_noise_image.reshape(k,i*j)

n_trial = 5
(k,i,j) = image_test.shape
accuracies = []

for n in range(n_trial):
    gaus_noise_image = np.array([add_gaussian_noise(image, mean=0, std=25) for image in image_test])
    gaus_noise_image_2d = gaus_noise_image.reshape(k,i*j)
    label_predict = model.predict(gaus_noise_image_2d)
    accuracy = accuracy_score(label_test, label_predict)
    accuracies.append(accuracy)
    print(f"Trial {n+1}, Logistic Regression Accuracy with Gaussian Noises: {accuracy}")
    print(classification_report(label_test, label_predict))
    conf_matrix = confusion_matrix(label_test, label_predict)
    print("Confusion Matrix:")
    print(conf_matrix)
    accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
print("Accuracy using Confusion Matrix:", accuracy)
mean_accuracy = np.mean(accuracies)
print(f"Mean Logistic Regression Accuracy over {n_trial} trials: {mean_accuracy}")

plt.figure(figsize=(9,9))
sns.heatmap(conf_matrix, annot=True, fmt=".0f", linewidths=.5, square = True, cmap = 'Blues')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy)
plt.title(all_sample_title, size = 15)

# Salt and Pepper Noise
def add_salt_and_pepper_noise(images, salt_prob, pepper_prob):
    """
    Adds salt and pepper noise to a set of images.

    Parameters:
    - images: NumPy array of images, assumed to be in the shape [num_images, height, width].
    - salt_prob: Probability of adding 'salt' noise.
    - pepper_prob: Probability of adding 'pepper' noise.

    Returns:
    - noisy_images: NumPy array of images with salt and pepper noise added.
    """
    # Copy the original images to avoid modifying them
    noisy_images = np.copy(images)
    # Salt noise
    num_salt = np.ceil(salt_prob * images.size * salt_prob)
    coords = [np.random.randint(0, i - 1, int(num_salt))
              for i in images.shape]
    noisy_images[coords] = 255
    # Pepper noise
    num_pepper = np.ceil(pepper_prob * images.size * pepper_prob)
    coords = [np.random.randint(0, i - 1, int(num_pepper))
              for i in images.shape]
    noisy_images[coords] = 0
    return noisy_images

n_trial = 5
(k,i,j) = image_test.shape
accuracies = []
for n in range(n_trial):
    sp_noise_image = np.array([add_salt_and_pepper_noise(image, salt_prob=0.01, pepper_prob=0.01) for image in image_test])
    sp_noise_image_2d = sp_noise_image.reshape(k,i*j)
    label_predict = model.predict(sp_noise_image_2d)
    accuracy = accuracy_score(label_test, label_predict)
    accuracies.append(accuracy)
    print(f"Trial {n+1}, Logistic Regression Accuracy with Salt & Pepper Noises: {accuracy}")
    print(classification_report(label_test, label_predict))

mean_accuracy = np.mean(accuracies)
print(f"Mean Logistic Regression Accuracy over {n_trial} trials: {mean_accuracy}")

plt.figure(figsize=(9,9))
sns.heatmap(conf_matrix, annot=True, fmt=".0f", linewidths=.5, square = True, cmap = 'Blues')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy)
plt.title(all_sample_title, size = 15)

label_predict = model.predict(sp_noise_image_2d)
accuracy = accuracy_score(label_test, label_predict)
print(f"Logistic Regression Accuracy with Salt & Pepper Noises: {accuracy}")
print(classification_report(label_test, label_predict))

# Geometric Transformations: Rotation
from tensorflow.keras.datasets import mnist
import tensorflow_datasets as tfds

mnist_r_dataset, info = tfds.load(name="mnist_corrupted/rotate", split="test", with_info=True)

mnist_r_images = []
mnist_r_labels = []
count = 0
for example in mnist_r_dataset:
    image = example["image"]
    label = example["label"]
    mnist_r_images.append(image.numpy().reshape(-1))
    mnist_r_labels.append(label.numpy())
    count += 1
    if count >= 1500:
        break

# Convert to numpy arrays
mnist_r_images = np.array(mnist_r_images)
mnist_r_labels = np.array(mnist_r_labels)

# Flatten and normalize the images
mnist_r_images_flat = mnist_r_images.astype('float32') / 255.0
mnist_r_images[300*n:300*(n+1)].shape

n_trials_r = 5  # Assuming you want 5 trials
accuracies = []

n=0
start_index = 300 * n
end_index = 300 * (n + 1)
current_images = mnist_r_images[start_index:end_index]
current_labels = mnist_r_labels[start_index:end_index]

    # Predict labels for the current batch
label_predict = model.predict(current_images)
accuracy = accuracy_score(current_labels, label_predict)  # Use the correct subset of labels

    # Store the accuracy and print it
accuracies.append(accuracy)
print(f"Trial {n+1}, Logistic Regression Accuracy with Rotation: {accuracy}")
print(classification_report(current_labels, label_predict))

# Optionally, calculate and print the mean accuracy after all trials
mean_accuracy = sum(accuracies) / len(accuracies)
print(f"Mean Logistic Regression Accuracy over {n_trials_r} trials: {mean_accuracy}")

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import numpy as np

accuracies = []

start_index = 0
end_index = 300
current_images = mnist_r_images[start_index:end_index]
current_labels = mnist_r_labels[start_index:end_index]

    # Predict labels for the current batch
label_predict = model.predict(current_images)
    # Store the accuracy and print it
print(classification_report(current_labels, label_predict))

    # Calculate and print the confusion matrix for each trial
conf_matrix = confusion_matrix(current_labels, label_predict)
accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
print(conf_matrix)
print(f"accuracy with confusion matrix: {accuracy}")

plt.figure(figsize=(9,9))
sns.heatmap(conf_matrix, annot=True, fmt=".0f", linewidths=.5, square = True, cmap = 'Blues')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy)
plt.title(all_sample_title, size = 15)

# Geometric Transformations: Translate
mnist_t_dataset, info = tfds.load(name="mnist_corrupted/translate", split="test", with_info=True)

mnist_t_images = []
mnist_t_labels = []
count = 0
for example in mnist_t_dataset:
    image = example["image"]
    label = example["label"]
    mnist_t_images.append(image.numpy().reshape(-1))
    mnist_t_labels.append(label.numpy())
    count += 1
    if count >= 1500:
        break

# Convert to numpy arrays
mnist_t_images = np.array(mnist_t_images)
mnist_t_labels = np.array(mnist_t_labels)

# Flatten and normalize the images
mnist_t_images_flat = mnist_t_images.astype('float32') / 255.0
start_index = 0
end_index = 300
current_images = mnist_t_images[start_index:end_index]
current_labels = mnist_t_labels[start_index:end_index]

    # Predict labels for the current batch
label_predict = model.predict(current_images)
    # Store the accuracy and print it
print(classification_report(current_labels, label_predict))

    # Calculate and print the confusion matrix for each trial
conf_matrix = confusion_matrix(current_labels, label_predict)
print("Confusion Matrix:")
print(conf_matrix)
accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
print(f"accuracy with confusion matrix: {accuracy}")

plt.figure(figsize=(9,9))
sns.heatmap(conf_matrix, annot=True, fmt=".0f", linewidths=.5, square = True, cmap = 'Blues')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(accuracy)
plt.title(all_sample_title, size = 15)
